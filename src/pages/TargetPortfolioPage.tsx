import React, { useState, useEffect } from 'react'
import { Link } from 'react-router-dom'
import { TargetPortfolioList, TargetPortfolioForm, TargetPortfolioListSkeleton } from '../components'
import { useTargetPortfolioStore } from '../stores'
import type { TargetPortfolioData } from '../types'

export const TargetPortfolioPage: React.FC = () => {
  const {
    targetPortfolios,
    isLoading,
    error,
    fetchTargetPortfolios,
    deleteTargetPortfolio,
    clearError
  } = useTargetPortfolioStore()
  
  const [isFormOpen, setIsFormOpen] = useState(false)
  const [editingPortfolio, setEditingPortfolio] = useState<TargetPortfolioData | null>(null)

  // Fetch portfolios on component mount
  useEffect(() => {
    fetchTargetPortfolios()
  }, [fetchTargetPortfolios])

  const handleAddPortfolio = () => {
    setEditingPortfolio(null)
    setIsFormOpen(true)
  }

  const handleEditPortfolio = (portfolio: TargetPortfolioData) => {
    setEditingPortfolio(portfolio)
    setIsFormOpen(true)
  }

  const handleDeletePortfolio = async (portfolioId: string) => {
    try {
      await deleteTargetPortfolio(portfolioId)
    } catch (error) {
      console.error('Failed to delete portfolio:', error)
    }
  }

  const handleCloseForm = () => {
    setIsFormOpen(false)
    setEditingPortfolio(null)
  }

  const handleSavePortfolio = () => {
    setIsFormOpen(false)
    setEditingPortfolio(null)
    // Refresh portfolios list will happen automatically through the store
  }

  const handleDuplicatePortfolio = (portfolio: TargetPortfolioData) => {
    const duplicatedPortfolio = {
      ...portfolio,
      id: '', // Will be generated by the database
      name: `${portfolio.name} (Copy)`,
      allocations: {
        ...portfolio.allocations,
        description: portfolio.allocations.description ? `${portfolio.allocations.description} (Copy)` : 'Copy of original portfolio'
      }
    }
    setEditingPortfolio(duplicatedPortfolio)
    setIsFormOpen(true)
  }

  // Loading state
  if (isLoading && targetPortfolios.length === 0) {
    return (
      <>
        {/* Page Title - Desktop Only */}
        <div className="hidden md:block mb-8">
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-3xl font-bold text-white mb-2">Target Portfolio</h1>
              <p className="text-gray-400">Set your ideal portfolio allocation and target weights</p>
            </div>
          </div>
        </div>

        {/* Target Portfolio Content Skeleton */}
        <TargetPortfolioListSkeleton count={2} />
      </>
    )
  }

  // Error state
  if (error) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="text-center">
          <div className="text-red-400 mb-4">⚠️</div>
          <p className="text-red-400 mb-4">{error}</p>
          <div className="flex gap-4 justify-center">
            <button
              onClick={() => {
                clearError()
                fetchTargetPortfolios()
              }}
              className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
            >
              Retry
            </button>
            <button
              onClick={clearError}
              className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
            >
              Dismiss
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <>
      {/* Page Title - Desktop Only */}
      <div className="hidden md:block mb-8">
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-3xl font-bold text-white mb-2">Target Portfolio</h1>
            <p className="text-gray-400">Set your ideal portfolio allocation and target weights</p>
          </div>
          {targetPortfolios.length > 0 && (
            <Link
              to="/analytics"
              className="px-4 py-2 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg hover:from-green-700 hover:to-emerald-700 transition-all flex items-center gap-2"
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                <path d="M9 19c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z" stroke="currentColor" strokeWidth="2"/>
                <path d="M12 9a3 3 0 11-6 0 3 3 0 016 0z" stroke="currentColor" strokeWidth="2"/>
                <path d="M15 13h6l-3-3z" stroke="currentColor" strokeWidth="2"/>
              </svg>
              Compare Portfolios
            </Link>
          )}
        </div>
      </div>

      {/* Target Portfolio Content */}
      <div className="space-y-4 md:space-y-8">
        <TargetPortfolioList
          portfolios={targetPortfolios}
          onEdit={handleEditPortfolio}
          onDelete={handleDeletePortfolio}
          onAdd={handleAddPortfolio}
          onDuplicate={handleDuplicatePortfolio}
        />
      </div>

      {/* Target Portfolio Form Modal */}
      <TargetPortfolioForm
        isOpen={isFormOpen}
        onClose={handleCloseForm}
        onSave={handleSavePortfolio}
        editPortfolio={editingPortfolio}
      />
    </>
  )
}