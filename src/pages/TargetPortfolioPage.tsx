import React, { useState, useEffect } from 'react'
import { TargetPortfolioList, TargetPortfolioForm, LazySkeletonLoader, AdaptiveSkeletonLoader } from '../components'
import { useTargetPortfolioStore } from '../stores'
import type { TargetPortfolioData } from '../types'

export const TargetPortfolioPage: React.FC = () => {
  const {
    targetPortfolios,
    isLoading,
    error,
    fetchTargetPortfolios,
    deleteTargetPortfolio,
    clearError
  } = useTargetPortfolioStore()
  
  const [isFormOpen, setIsFormOpen] = useState(false)
  const [editingPortfolio, setEditingPortfolio] = useState<TargetPortfolioData | null>(null)

  // Fetch portfolios on component mount
  useEffect(() => {
    fetchTargetPortfolios()
  }, [fetchTargetPortfolios])

  const handleAddPortfolio = () => {
    setEditingPortfolio(null)
    setIsFormOpen(true)
  }

  const handleEditPortfolio = (portfolio: TargetPortfolioData) => {
    setEditingPortfolio(portfolio)
    setIsFormOpen(true)
  }

  const handleDeletePortfolio = async (portfolioId: string) => {
    try {
      await deleteTargetPortfolio(portfolioId)
    } catch (error) {
      console.error('Failed to delete portfolio:', error)
    }
  }

  const handleCloseForm = () => {
    setIsFormOpen(false)
    setEditingPortfolio(null)
  }

  const handleSavePortfolio = () => {
    setIsFormOpen(false)
    setEditingPortfolio(null)
    // Refresh portfolios list will happen automatically through the store
  }

  const handleDuplicatePortfolio = (portfolio: TargetPortfolioData) => {
    const duplicatedPortfolio = {
      ...portfolio,
      id: '', // Will be generated by the database
      name: `${portfolio.name} (Copy)`,
      allocations: {
        ...portfolio.allocations,
        description: portfolio.allocations.description ? `${portfolio.allocations.description} (Copy)` : 'Copy of original portfolio'
      }
    }
    setEditingPortfolio(duplicatedPortfolio)
    setIsFormOpen(true)
  }

  // Loading state
  if (isLoading && targetPortfolios.length === 0) {
    return (
      <>
        {/* Target Portfolio Content Skeleton */}
        <LazySkeletonLoader type="target-portfolio-list" count={2} />
      </>
    )
  }

  // Error state
  if (error) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="text-center">
          <div className="text-red-400 mb-4">⚠️</div>
          <p className="text-red-400 mb-4">{error}</p>
          <div className="flex gap-4 justify-center">
            <button
              onClick={() => {
                clearError()
                fetchTargetPortfolios()
              }}
              className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
            >
              Retry
            </button>
            <button
              onClick={clearError}
              className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
            >
              Dismiss
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <>
      {/* Target Portfolio Content */}
      <div className="space-y-4 md:space-y-8">
        <AdaptiveSkeletonLoader
          type="target-portfolio-list"
          count={2}
          isLoading={isLoading}
          showProgressively={true}
        >
          <TargetPortfolioList
            portfolios={targetPortfolios}
            onEdit={handleEditPortfolio}
            onDelete={handleDeletePortfolio}
            onAdd={handleAddPortfolio}
            onDuplicate={handleDuplicatePortfolio}
          />
        </AdaptiveSkeletonLoader>
      </div>

      {/* Target Portfolio Form Modal */}
      <TargetPortfolioForm
        isOpen={isFormOpen}
        onClose={handleCloseForm}
        onSave={handleSavePortfolio}
        editPortfolio={editingPortfolio}
      />
    </>
  )
}